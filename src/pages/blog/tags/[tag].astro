---
import Layout from "@layouts/Layout.astro";
import { sortedblogEntriesList } from "@utils";
import BlogCard from "@components/features/blog/BlogCard.astro";

import type { GetStaticPathsResult } from "astro";
import type { CollectionEntry } from "astro:content";
import IconButton from "@components/IconButton.astro";
import leftArrow from '@assets/icons/caret-left-fill.svg';

interface Props {
  blog: CollectionEntry<"blog">[];
  originalTag: string;
}

export async function getStaticPaths() {
  const paths: GetStaticPathsResult = [];

  const uniqueTags = new Set<string>(
    sortedblogEntriesList.flatMap((blog) => blog.data.tags),
  );

  for (const tag of uniqueTags) {
    const filteredBlog = sortedblogEntriesList.filter((blog) =>
      blog.data.tags.includes(tag),
    );

    const encodedTag = encodeURIComponent(tag);
    paths.push({
      params: { tag: encodedTag },
      props: { blog: filteredBlog, originalTag: tag },
    });

    // エンコードされていない場合のpathも生成
    if (tag !== encodedTag) {
      paths.push({
        params: { tag },
        props: { blog: filteredBlog, originalTag: tag },
      });
    }
  }

  return paths;
}

const { blog, originalTag } = Astro.props;
---

<Layout title={`${originalTag}の記事 | 情報研究会 CACTUS`}>
  <Fragment slot="head">
    <meta property="og:type" content="article" />
  </Fragment>

  <div class="body">
    <h1>Blog</h1>
    <p>#{originalTag} のタグが付いた記事一覧</p>
    <div class="container">
      {
        blog.map((blogEntry) => (
          <BlogCard slug={blogEntry.slug} blog={blogEntry.data} />
        ))
      }
    </div>

    <div class="footer">
      <IconButton href="/blog/tags" icon={leftArrow} alt="Back">タグ一覧へ</IconButton>
    </div>
  </div>
</Layout>

<style>
  .body {
    margin: 0 auto;
    max-width: 1100px;
    padding: 0 1rem;
  }

  .body h1 {
    font-size: 2.5rem;
    margin: 0 0 0.5rem 0;
    color: var(--color-text-primary);
    font-weight: 700;
    text-align: center;
  }

  .body p {
    font-size: 1.2rem;
    margin: 0 0 2rem 0;
    color: var(--color-text-secondary);
    font-weight: 500;
    text-align: center;
  }

  svg {
    width: 1em;
    height: 1em;
    vertical-align: -0.15em;
    fill: currentColor;
    overflow: hidden;
  }

  .container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .footer {
    margin-top: 2rem;
    margin-bottom: 1rem;
    text-align: left;
  }

  @media (max-width: 768px) {
    .body {
      padding: 0 0.5rem;
    }

    .body h1 {
      font-size: 2rem;
    }

    .container {
      gap: 1rem;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    }
  }

  @media (max-width: 480px) {
    .container {
      grid-template-columns: 1fr;
    }
  }
</style>
