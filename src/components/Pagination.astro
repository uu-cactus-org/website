---
import { Image } from 'astro:assets';
import type { Page } from 'astro';

import threeDots from '@assets/icons/three-dots.svg'

interface Props {
  page: Page;
  baseUrl: string;
}

const { page, baseUrl } = Astro.props;

const getPageUrl = (pageNumber: number) => (
  pageNumber === 1 ? page.url.first : `${baseUrl}/${pageNumber}`
);

const maxVisibleButtons = 6;
const totalPages = page.lastPage;
const currentPage = page.currentPage;

const getPageNumbers = () => {
  const visiblePages: (number | "...")[] = [];

  if (totalPages <= maxVisibleButtons) {
    // 総ページ数が少ない場合はすべて表示
    return Array.from({ length: totalPages }, (_, i) => i + 1);
  }

  // 先頭ページ (1) は必ず表示
  visiblePages.push(1);

  // 2ページ目以降が遠いなら「...」を追加
  if (currentPage > 3) {
    visiblePages.push("...");
  }

  // 現在のページの前後を計算
  let startPage = Math.max(2, currentPage - 1);
  let endPage = Math.min(totalPages - 1, currentPage + 1);

  if (currentPage <= 3) {
    // 先頭付近（1,2,3ページ目）なら最初の数ページを優先的に表示
    startPage = 2;
    endPage = maxVisibleButtons - 2;
  } else if (currentPage >= totalPages - 2) {
    // 最後付近（8,9,10ページ目など）は最後の数ページを優先
    startPage = totalPages - (maxVisibleButtons - 3);
    endPage = totalPages - 1;
  }

  for (let i = startPage; i <= endPage; i++) {
    visiblePages.push(i);
  }

  // 最終ページの手前が遠いなら「...」を追加
  if (currentPage < totalPages - 2) {
    visiblePages.push("...");
  }

  // 最終ページ（lastPage）は必ず表示
  visiblePages.push(totalPages);

  return visiblePages;
};

const pageNumbers = getPageNumbers();
---
<nav>
  <ul>

    {
      pageNumbers.map((pageNumber) => (
        <li>
          {
            pageNumber === '...' 
            //FIXME - 画像の表示位置を中央にしたい
              ? <span class="dots-container"><Image class="dots" src={threeDots} alt="..." /></span>
              : page.currentPage === pageNumber
                ? <span class="link current">{pageNumber}</span>
                : <a class="link" href={getPageUrl(pageNumber as number)}>{pageNumber}</a>
          }
        </li>
      ))
    }
  </ul>
</nav>


<style>
  nav {
    width: 100%;
    display: flex;
    justify-content: center;
    margin: 2rem 0;
  }

  ul {
    display: flex;
    justify-content: center;
    list-style: none;
    padding-inline-start: 0;
    gap: 0.5rem;
  }

  .link {
    box-sizing: border-box;
    text-decoration: none;
      
    display: flex;
    justify-content: center;
    align-items: center;

    color: var(--color-text-primary);
    width: 2.8rem;
    height: 2.8rem;

    border: 2px solid var(--color-border-light);
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .link.current {
    background-color: var(--color-cactus);
    color: white;
    border-color: var(--color-cactus);
    transform: scale(1.1);
  }

  .link:not(.current):hover {
    background-color: rgba(70, 189, 76, 0.1);
    border-color: var(--color-cactus);
    color: var(--color-cactus-dark);
    transform: translateY(-2px);
  }

  .dots-container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 2.8rem;
    height: 2.8rem;
    color: var(--color-text-secondary);
  }

  .dots {
    width: 1.2rem;
    height: 1.2rem;
    object-fit: contain;
    opacity: 0.6;
  }

  @media (max-width: 768px) {
    ul {
      gap: 0.3rem;
    }

    .link,
    .dots-container {
      width: 2.4rem;
      height: 2.4rem;
      font-size: 0.9rem;
    }

    .dots {
      width: 1rem;
      height: 1rem;
    }
  }
</style>
