---
import { getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { formatDate, getProfileImage } from '@utils';
import type { BlogSchema } from '@config';

import noimage from '@assets/noimage.png';

interface Props {
  frontmatter: BlogSchema;
}

const { frontmatter } = Astro.props;
const { category, tags } = frontmatter;

interface AuthorLike {
  name: string;
  icon: string;
  slug?: string;
}

const authors: AuthorLike[] = await Promise.all(
  frontmatter.authors.map(async authorId => {
    // プロフィールが存在しない場合も考慮
    const author = await getEntry('authors', authorId);
    return {
      name: author?.data.name ?? authorId,
      icon: getProfileImage(author?.data.profileImage),
      slug: author ? authorId : undefined,
    };
  })
);

const coverImage = frontmatter.coverImage ?? noimage;
---
<header>
  <div class="cover-image">
    <Image src={coverImage} alt="cover" />
  </div>

  <h1>{frontmatter.title}</h1>

  <div class="category-content">
    <a href={`/blog/categories/${encodeURIComponent(category)}`}>
      {category}
    </a>
  </div>

  <div class="date">
    {frontmatter.updated && (
      <time datetime={frontmatter.updated.toISOString()} itemprop="datemodified">
        最終更新日: {formatDate(frontmatter.updated)}
      </time>
    )}
    
    <time datetime={frontmatter.pubdate.toISOString()} itemprop="datepublished">
      投稿日: {formatDate(frontmatter.pubdate)}
    </time>
  </div>

  <div class="tag-container">
    {
      tags.map((tag) => (
        <a href={`/blog/tags/${encodeURIComponent(tag)}`}>
          <div class="tag-content">#{tag}</div>
        </a>
      ))
    }
  </div>

  <div class="author-container">
    <div class="author-list">
      {
        authors.map(author => (
          author.slug
            ? <a href={`/blog/authors/${author.slug}`}>
                <div class="author-content">
                  <img src={author.icon} alt="author icon" width="30" height="30" />
                  {author.name}
                </div>
              </a>
            : <span>
                <div class="author-content">
                  <img src={author.icon} alt="author icon" width="30" height="30" />
                  {author.name}
                </div>
              </span>
        ))
      }
    </div>
  </div>  
</header>

<style>
  header {
    margin-bottom: 2rem;
    border-bottom: 1px solid var(--color-border-light);
    padding-bottom: 2rem;
  }
  
  a {
    text-decoration: none;
    color: inherit;
  }

  div {
    margin: 0.3rem 0;
  }

  .cover-image {
    margin: 2rem 0;
    position: relative;
    max-width: 100%;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  }

  .cover-image img {
    object-fit: contain;
    width: 100%;
    height: auto;
    max-height: 400px;
    display: block;
  }

  .cover-image::before {
    content: '';
    width: 100%;
    height: 100%;
    display: block;
    background: linear-gradient(
      rgba(255, 255, 255, 0) 0,
      rgba(255, 255, 255, 0.1) 90%
    );
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: none;
  }

  h1 {
    font-size: 1.8rem;
    font-weight: 700;
    padding-bottom: 0.8rem;
    border-bottom: 3px solid var(--color-cactus);
    margin-bottom: 1.5rem;
    color: var(--color-text-primary);
    line-height: 1.3;
  }

  .category-content {
    background-color: var(--color-background-light);
    border: 2px solid var(--color-border-light);
    border-radius: 8px;
    display: inline-block;
    position: relative;
    transition: all 0.2s ease;
  }

  .category-content a {
    display: block;
    padding: 0.4rem 1.2rem;
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .category-content:hover {
    background-color: var(--color-cactus);
    border-color: var(--color-cactus);
    color: white;
    transform: translateY(-1px);
  }

  .category-content:hover a {
    color: white;
  }

  .date {
    font-size: 0.9rem;
    text-align: right;
    float: right;
    color: var(--color-text-secondary);
  }
  
  time {
    display: block;
    margin-bottom: 0.3rem;
    font-weight: 500;
  }

  .author-list {
    display: flex;
    gap: 0.8rem;
    flex-wrap: wrap;
  }

  .author-content {
    background-color: var(--color-background-light);
    border: 2px solid var(--color-border-light);
    border-radius: 100px;
    padding: 0.6rem 1rem;
    display: flex;
    align-items: center;
    transition: all 0.2s ease;
  }

  .author-content:hover {
    background-color: var(--color-cactus);
    border-color: var(--color-cactus);
    color: white;
    transform: translateY(-1px);
  }

  .author-content img {
    border-radius: 50%;
    margin-right: 0.6rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .tag-container {
    display: flex;
    gap: 0.8rem;
    flex-wrap: wrap;
    margin: 0.6rem 0;
  }

  .tag-content {
    background-color: rgba(70, 189, 76, 0.1);
    padding: 0.4rem 1rem;
    border: 2px solid rgba(70, 189, 76, 0.3);
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--color-cactus-dark);
    transition: all 0.2s ease;
  }

  .tag-content:hover {
    background-color: var(--color-cactus);
    border-color: var(--color-cactus);
    color: white;
    transform: translateY(-1px);
  }

  @media (max-width: 768px) {
    header {
      margin-bottom: 1.5rem;
      padding-bottom: 1.5rem;
    }

    h1 {
      font-size: 1.8rem;
    }

    .cover-image {
      margin: 1.5rem 0;
    }

    .tag-content {
      padding: 0.3rem 0.8rem;
      font-size: 0.8rem;
    }

    .author-content {
      padding: 0.5rem 0.8rem;
    }

    .date {
      font-size: 0.85rem;
    }
  }
</style>
